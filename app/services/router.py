# app/services/router.py
from __future__ import annotations
import json
from typing import Optional, Literal, Dict, Any
from ..vectorstore import chat_client

Intent = Literal["small_talk", "coverage", "upgrades", "limits", "other"]

_SYSTEM = (
    "You are an intent router for a Home Warranty assistant (HomeShield). "
    "Classify the user's single message into exactly one of these intents:\n"
    "- small_talk   (greetings, thanks, ok, chit-chat)\n"
    "- coverage     (asks whether something is covered, or describes an equipment problem)\n"
    "- upgrades     (asks about higher plans / add-ons / upgrading to get coverage)\n"
    "- limits       (asks about caps, deductibles, service fees, payout limits)\n"
    "- other        (anything else)\n\n"
    "Also extract a succinct issue phrase if possible (equipment + problem), e.g. "
    "'AC compressor electrical failure', 'evaporator coil leak', 'breaker panel pitted bus bar'.\n"
    "Output ONLY compact JSON: "
    "{\"intent\":\"<one>\",\"issue\":\"<short or empty>\"}."
)

def _parse_json(s: str) -> Dict[str, Any]:
    s = s.strip()
    if s.startswith("```"):
        s = s.strip("`")
        # remove optional leading 'json'
        if s.lower().startswith("json"):
            s = s[4:]
    s = s.strip()
    try:
        return json.loads(s)
    except Exception:
        return {"intent": "other", "issue": ""}

def classify_message(message: str, last_issue: Optional[str] = None) -> Dict[str, Any]:
    llm = chat_client(temperature=0)
    user = (
        f"Message: {message}\n"
        f"LastIssueContext (optional): {last_issue or ''}\n"
        "Return JSON only."
    )
    raw = llm.invoke([{"role": "system", "content": _SYSTEM},
                      {"role": "user", "content": user}]).content
    data = _parse_json(raw)
    intent: Intent = data.get("intent") or "other"
    issue = (data.get("issue") or "").strip()
    return {"intent": intent, "issue": issue}

def small_talk_reply(message: str) -> str:
    """Short, friendly 1-liner generated by the model."""
    llm = chat_client(temperature=0.3)
    sys = ("You reply to brief small-talk in 1 short friendly sentence. "
           "Do NOT ask questions. Do NOT discuss policy. Keep it casual.")
    raw = llm.invoke([{"role": "system", "content": sys},
                      {"role": "user", "content": message}]).content
    return raw.strip()
